name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Проверяем репозиторий
    - name: Checkout code
      uses: actions/checkout@v4

    # Устанавливаем Node.js (предполагаем, что клиент и сервер используют Node.js)
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Укажите вашу версию Node.js, например, 18 или 20

    # Устанавливаем зависимости для client
    - name: Install client dependencies
      working-directory: ./client
      run: npm install

    # Устанавливаем зависимости для server
    - name: Install server dependencies
      working-directory: ./server
      run: npm install

    # Устанавливаем Python для тестов
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Версия Python из лога (3.11.12)

    # Устанавливаем зависимости для тестов
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-playwright pytest-allure allure-pytest pytest-base-url
        playwright install --with-deps

    # Запускаем сервер (бэкенд)
    - name: Start server
      working-directory: ./server
      run: npm run start & # Предполагаем, что команда для запуска сервера — "start"
      env:
        PORT: 8000 # Укажите порт сервера, если он отличается

    # Запускаем клиент (фронтенд)
    - name: Start client
      working-directory: ./client
      run: npm run dev & # Команда для запуска Next.js в режиме разработки
      env:
        PORT: 3000 # Убедитесь, что клиент запускается на порту 3000

    # Даем серверам время на запуск
    - name: Wait for services to start
      run: sleep 10

    # Проверяем доступность клиентского приложения
    - name: Check client availability
      run: curl --retry 5 --retry-delay 5 --retry-max-time 30 http://localhost:3000

    # Проверяем доступность сервера
    - name: Check server availability
      run: curl --retry 5 --retry-delay 5 --retry-max-time 30 http://localhost:8000

    # Запускаем тесты
    - name: Run tests
      run: pytest --alluredir=allure-results

    # Генерируем отчет Allure (опционально)
    - name: Generate Allure report
      if: always()
      run: |
        npm install -g allure-commandline
        allure generate allure-results --clean -o allure-report

    # Загружаем отчет Allure как артефакт
    - name: Upload Allure report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: allure-report