name: CI Pipeline

on:
  push:
    branches:
      - main
      - feature/app-integration
  pull_request:
    branches:
      - main
      - feature/app-integration

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout репозитория
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: Testing

      # Установка Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Установка Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Установка зависимостей для client
      - name: Install Client Dependencies
        run: |
          cd Testing/client
          npm ci

      # Установка зависимостей для server
      - name: Install Server Dependencies
        run: |
          cd Testing/server
          npm ci

      # Установка зависимостей для тестов
      - name: Install Test Dependencies
        run: |
          cd Testing
          pip install -r requirements.txt

      # Запуск сервера в фоновом режиме
      - name: Start Server
        run: |
          cd Testing/server
          npm run start &
          sleep 10  # Даем серверу время запуститься

      # Запуск клиента в фоновом режиме
      - name: Start Client
        run: |
          cd Testing/client
          npm run dev &
          sleep 10  # Даем клиенту время запуститься

      # Проверка доступности приложения
      - name: Check Application Availability
        run: |
          curl --retry 5 --retry-delay 5 --retry-max-time 30 http://localhost:3000 || exit 1
          curl --retry 5 --retry-delay 5 --retry-max-time 30 http://localhost:3000/authentication || exit 1

      # Запуск тестов
      - name: Run Tests
        run: |
          cd Testing
          pytest --alluredir=allure-results
        env:
          BASE_URL: http://localhost:3000
          EMAIL: ${{ secrets.EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}

      # Генерация и загрузка отчета Allure
      - name: Generate Allure Report
        if: always()
        run: |
          cd Testing
          allure generate allure-results -o allure-report --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: Testing/allure-report