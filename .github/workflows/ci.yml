name: CI Pipeline

on:
  push:
    branches:
      - main
      - feature/app-integration
  pull_request:
    branches:
      - main
      - feature/app-integration

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # Checkout репозитория
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: Testing

      # Установка Node.js с кэшированием
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            Testing/client/package-lock.json
            Testing/server/package-lock.json

      # Установка Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Установка зависимостей для client
      - name: Install Client Dependencies
        run: |
          cd Testing/client
          npm ci --legacy-peer-deps --prefer-offline --cache .npm
          ls -la
          cat package.json
          echo "Client dependencies installed"
        timeout-minutes: 5

      # Установка зависимостей для server
      - name: Install Server Dependencies
        run: |
          cd Testing/server
          npm ci --prefer-offline --cache .npm
          ls -la
          cat package.json
          echo "Server dependencies installed"
        timeout-minutes: 5

      # Настройка Prisma для SQLite
      - name: Configure Prisma for SQLite
        run: |
          cd Testing/server
          ls -la prisma/
          sed -i'.bak' 's/provider = "postgresql"/provider = "sqlite"/' prisma/schema.prisma
          echo "DATABASE_URL=file:./test.db" > .env
          echo "PORT=8000" >> .env
          cat .env
          cat prisma/schema.prisma
          echo "Prisma configured for SQLite"

      # Генерация Prisma клиента
      - name: Generate Prisma Client
        run: |
          cd Testing/server
          npx prisma generate
          echo "Prisma client generated"

      # Применение миграций
      - name: Run Prisma Migrations
        run: |
          cd Testing/server
          npx prisma migrate deploy
          echo "Prisma migrations applied"

      # Создание тестового пользователя
      - name: Seed Test Database
        run: |
          cd Testing/server
          npx ts-node src/seed.ts
          echo "Test database seeded"

      # Сборка server
      - name: Build Server
        run: |
          cd Testing/server
          npx tsc
          ls -la dist || echo "No dist directory found"
          echo "Server built"

      # Установка зависимостей для тестов
      - name: Install Test Dependencies
        run: |
          cd Testing
          pip install -r requirements.txt
          pip list
          pip show allure-pytest
          echo "Test dependencies installed"

      # Установка браузеров Playwright
      - name: Install Playwright Browsers
        run: |
          cd Testing
          playwright install --with-deps chromium
          echo "Playwright browsers installed"

      # Запуск сервера на порту 8000
      - name: Start Server
        run: |
          cd Testing/server
          npm run start &
          sleep 30
          netstat -tulnp | grep 8000 || echo "No process listening on port 8000"
          ps aux | grep node || echo "No node processes running"
          echo "Server started"
        env:
          PORT: 8000
          DATABASE_URL: file:./test.db

      # Запуск клиента на порту 3000
      - name: Start Client
        run: |
          cd Testing/client
          npm run dev &
          sleep 30
          netstat -tulnp | grep 3000 || echo "No process listening on port 3000"
          ps aux | grep node || echo "No node processes running"
          echo "Client started"

      # Проверка доступности приложения
      - name: Check Application Availability
        run: |
          curl --retry 5 --retry-delay 5 --retry-max-time 30 http://localhost:3000 || exit 1
          curl --retry 5 --retry-delay 5 --retry-max-time 30 http://localhost:3000/authentication || exit 1
          curl --retry 5 --retry-delay 5 --retry-max-time 30 -X POST http://localhost:8000/api/auth/login -H "Content-Type: application/json" -d '{"email":"test@example.com","password":"password"}' -v || exit 1
          echo "Application is accessible"

      # Запуск тестов
      - name: Run Tests
        run: |
          cd Testing
          pytest --alluredir=allure-results -v
        env:
          BASE_URL: http://localhost:3000
          EMAIL: test@example.com
          PASSWORD: password

      # Генерация и загрузка отчета Allure
      - name: Generate Allure Report
        if: always()
        run: |
          cd Testing
          allure generate allure-results -o allure-report --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Загрузка отчета Allure
      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: Testing/allure-report